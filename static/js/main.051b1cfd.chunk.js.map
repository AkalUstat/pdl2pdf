{"version":3,"sources":["cover.jpeg","Header.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LoadingExample","state","show","onShow","_this","setState","onHide","react_default","a","createElement","className","href","src","coverImage","alt","width","Component","ConversionInput","handleChange","event","props","textChange","placeholder","onChange","this","outputLink","React","PureComponent","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","add","value","loadingBarProgress","updateValue","complete","onLoaderFinished","handleInputChange","self","assertThisInitialized","inputUrl","url","parse","target","inputHost","host","id","query","userMessage","metaUrl","concat","numPages","title","pages","pagesLeft","buffer","http","get","res","error","statusCode","Error","console","message","resume","rawData","on","chunk","$","cheerio","load","text","filter","trim","next","parseInt","_loop","i","imageUrl","Jimp","read","then","image","getBase64","MIME_PNG","err","data","log","sample","Math","floor","imgProps","pdf","getImageProperties","pdfWidth","internal","pageSize","getWidth","pdfHeight","height","jsPDF","addImage","addPage","output","fs","writeFileSync","catch","e","_this2","index_es","progress","color","Header_LoadingExample","Body_ConversionInput","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.051b1cfd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cover.a303f64d.jpeg\";","import React, { Component } from 'react'\nimport './Header.css'\nimport coverImage from './cover.jpeg'\n\nexport default class LoadingExample extends Component {\n  state = {\n    show: false\n  }\n\n  onShow = ()=> {\n    this.setState({ show: true })\n  }\n\n  onHide = ()=> {\n    this.setState({ show: false })\n  }\n\n  render() {\n    return (\n      <header className=\"component-header\">\n        <div className=\"component-header-title\">\n          pdl2pdf ~ Panjab Digital Library to PDF Converter\n        </div>\n        <h2>\n        download image galleries from <a href=\"http://panjabdigilib.org\">punjabdigilib.org</a> onto a single PDF file\n        </h2>\n        <hr />\n        <div className=\"col-md-10\">\n        <br /><br />\n        <p>\n          ਪੁੰਜਾਬ ਡਿਜਿਟਲ ਲਾਈਬ੍ਰੇਰੀ (Panjab Digital Library) ਇਕ ਅਮੋਲਕ ਖਜਾਨਾ ਹੈ ਜਿਸ ਦੇ ਰਾਹੀਂ ਪੁਰਾਤਨ ਜਾਂ ਨਵੀਨ ਗ੍ਰੰਥਾਂ, ਪੁਸਤਕਾਂ ਅਤੇ ਹੋਰ ਲੇਖਾਂ ਦੀ ਸੰਬਾਲ ਕੀਤੀ ਗਈ ਹੈ,\n          ਅਤੇ <a href=\"http://panjabdigilib.org\">punjabdigilib.org</a> ਵੈਬਸਾਈਟ ਰਾਹੀਂ ਕੋਈ ਵੀ ਦਰਸ਼ਨ ਕਰ ਸੱਕਦਾ। ਪਰ ਕੁੱਝ ਲੇਖ ਜੋ ਸਿਰਫ ਤਸਵੀਰਾਂ ਦੇ ਰੂਪ ਵਿਚ ਹਨ, ਓਹੋ ਲੇਖ ਸੌਖੇ ਤਰੀਕੇ ਨਾਲ ਦਾਊਨਲੋਡਾਂ ਨਹੀ ਕਰ ਸੱਕਦੇ।\n          ਓਸ ਕਾਰਣ, ਇਸ ਵੈਬਸਾਈਟ ਵਿਚ ਲਿੰਕ ਪਾ ਕੇ, PDF ਦੇ ਰੂਪ ਵਿਚ ਦੋਾਨਲੋੳਦ ਕਰ ਲੋ ਜੀ।\n        </p>\n        <br />\n        <p>\n          Panjab Digital Library is an invaluable collection of old and new manuscripts that have been digitized and preserved.\n          However, not all of the content is easily downloadable.\n          This utility can be used to convert image galleries for manuscripts that are missing a PDF download link.\n          Simply paste the link of a manuscript that you would like to download and a PDF will be generated.\n        </p>\n        </div>\n        <div className=\"col-md-2\">\n          <img src={coverImage} alt=\"puratan SriDasamGranthSahibJee saroop pehila ang\" width=\"200\"/>\n          <br /><br />\n        </div>\n        <div className=\"col-md-12\">\n        <hr />\n        <p>\n          <b>DISCLAIMER:</b> This website downloads and compiles image data that is freely available on www.panjabdigilib.org.\n          The website does not store any data on its own servers.\n        </p>\n        <br />\n        <p>\n          <b>*** ਜਰੂਰੀ ਬੇਨਤੀ: ਕਈ ਦਾਊਨਲੋਡਾਂ ਨੂੰ ਖੱਤਮ ਹੋਨ ਲਈ ਕੁੱਝ ਮਿੰਟ ਲਗ ਸੱਕਦੇ ਹਨ।</b>\n        </p>\n        <p>\n          <b>***Important: The program may take several minutes to complete for large files, please be patient!</b>\n        </p>\n        <p>\n        (DO NOT close the browser if the loading bar appears to freeze on the last panna.\n          You can right-click and select 'Inspect Element' and then 'Console' to view progress.)\n        </p>\n        </div>\n      </header>\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './Body.css'\n\n\nexport default class ConversionInput extends React.PureComponent {\n  static propTypes = {\n    textChange: PropTypes.func\n  };\n\n  handleChange = event => {\n    this.props.textChange(event);\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"component-pdl-input\">\n          <div>\n            <input placeholder=\"Paste a URL link to the manuscript, ex: http://panjabdigilib.org/webuser/searches/displayPage.jsp?ID=8497&page=1&CategoryID=1\" onChange={this.handleChange} />\n          </div>\n          <div className=\"component-pdl-user-message\">\n            {this.props.outputLink}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/*jshint loopfunc:true */\nimport React from 'react';\nimport LoadingBar from 'react-top-loading-bar'\nimport fs from 'fs'\nimport url from 'url'\nimport http from 'http'\nimport cheerio from 'cheerio'\nimport * as jsPDF from 'jspdf'\nimport Jimp from 'jimp/es';\nimport Header from './Header'\nimport Body from './Body'\nimport './App.css';\n\n\nexport default class App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: \"\",\n      userMessage: \"\",\n      loadingBarProgress: 0\n    };\n  }\n\n  add = value => {\n    this.setState({\n      loadingBarProgress: this.state.loadingBarProgress + value\n    })\n  }\n\n  updateValue = value => {\n    this.setState({\n      loadingBarProgress: value\n    })\n  }\n\n\n  complete = () => {\n    this.setState({ loadingBarProgress: 100 })\n  }\n\n  onLoaderFinished = () => {\n    this.setState({ loadingBarProgress: 0 })\n  }\n\n  handleInputChange = event => {\n    let self = this;\n    this.add(1);\n    const inputUrl = url.parse(event.target.value, true)\n    const hostUrl = 'panjabdigilib.org';\n    const inputHost = inputUrl.host;\n    const id = inputUrl.query['ID'];\n    if (inputHost !== hostUrl || id == null) {\n      this.setState({\n        userMessage: `Please enter a valid URL from www.panjabdigilib.org`\n      })\n    } else {\n      const metaUrl = `http://cors-sikhutils.herokuapp.com/http://${hostUrl}/webuser/searches/displayPage.jsp?ID=${id}&page=1&CategoryID=1`;\n      var numPages = null;\n      var title = 'untitled';\n      var pages = 1;\n      var pagesLeft = 0;\n      var buffer = [];\n      http.get(metaUrl, (res) => {\n        const {\n          statusCode\n        } = res;\n        let error;\n        if (statusCode !== 200) {\n          error = new Error(`request failed, status code: ${statusCode}`);\n        }\n        if (error) {\n          console.error(error.message);\n          // Consume response data to free up memory\n          res.resume();\n          return;\n        }\n        let rawData = '';\n        res.on('data', (chunk) => {\n          rawData += chunk;\n        });\n        res.on('end', () => {\n          try {\n            var $ = cheerio.load(rawData);\n            title = $('a[title*=\"on Panjab Digital Library\"]').text();\n            numPages = $('td').filter(function() {\n              return $(this).text().trim() === 'Pages';\n            }).next().text();\n            pages = pagesLeft = parseInt(numPages);\n            for (let i = 1; i <= pages; i++) {\n              const imageUrl = `http://cors-sikhutils.herokuapp.com/http://panjabdigilib.org/images?ID=${id}&page=${i}&pagetype=null`;\n              Jimp.read(imageUrl)\n                .then(image => {\n                  // imagePromises.push(image.getBase64Async(Jimp.MIME_PNG));\n                  image.getBase64(Jimp.MIME_PNG, function(err, data) {\n                    if (err != null) {\n                      console.log('error downloading image');\n                    } else {\n                      console.log(`Processing images... ${pagesLeft}/${pages} ਪਨੇ left.`)\n                      buffer[i] = data;\n                      pagesLeft -= 1;\n                      self.setState({\n                        userMessage: `Processing images... ${pagesLeft}/${pages} ਪਨੇ left. This may take a while.`,\n                        loadingBarProgress: (((1 - (pagesLeft/pages))*100)-1)\n                      })\n                      if (pagesLeft === 0) {\n                        console.log(\"Finished processing. Generating PDF...\");\n                        // self.setState({\n                        //   userMessage: `Finished processing. Generating PDF...`\n                        // });\n                        const sample = Math.floor(pages/2);\n                        const imgProps = pdf.getImageProperties(buffer[sample]);\n                        const pdfWidth = pdf.internal.pageSize.getWidth();\n                        const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;\n                        var pdf = new jsPDF('p', 'mm', 'a4', true);\n                        for (let i = 1; i <= pages; i++) {\n                          // self.setState({\n                          //   userMessage: `Generating PDF... ${i}/${pages} ਪਨੇ completed. This may take a while.`,\n                          //   loadingBarProgress: (((i/pages))*100-1)\n                          // })\n                          // console.log(`Generating PDF... ${i}/${pages} ਪਨੇ completed`);\n                          pdf.addImage(buffer[i], 'PNG', 0, 0, pdfWidth, pdfHeight, '', 'FAST');\n                          pdf.addPage();\n                        }\n                        console.log('Downloading PDF...')\n                        self.setState({\n                          userMessage: `Downloading PDF...`\n                        });\n                        // pdf.save(`${id}-${title}.pdf`);\n                        const data = pdf.output();\n                        fs.writeFileSync(`${id}-${title}.pdf`, data);\n                        self.setState({\n                          userMessage: `Download complete. `\n                        });\n                        self.complete();\n                      }\n                    }\n                  });\n                })\n                .catch(err => {\n                  console.log(\"error fetching image\")\n                });\n            }\n          } catch (e) {\n            console.error(`error parsing request: ${e.message}`);\n          }\n        });\n      }).on('error', (e) => {\n        console.error(`network request error: ${e.message}`);\n      });\n      this.setState({\n        userMessage: `Loading webpage...`\n      })\n    };\n  }\n\n  render() {\n    return (\n      <div>\n      <LoadingBar\n        progress={this.state.loadingBarProgress}\n        height={5}\n        color='#00d8ff'\n        onLoaderFinished={() => this.onLoaderFinished()}\n      />\n      <Header/>\n      <Body textChange = {this.handleInputChange} outputLink = {this.state.userMessage}/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div className=\"guca\">\n    <header className=\"guca-header\">\n    <App />\n    </header>\n  </div>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}