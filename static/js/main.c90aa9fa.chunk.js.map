{"version":3,"sources":["Header.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["LoadingExample","state","show","onShow","_this","setState","onHide","react_default","a","createElement","className","href","Component","ConversionInput","handleChange","event","props","textChange","placeholder","onChange","this","outputLink","React","PureComponent","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","self","assertThisInitialized","inputUrl","url","parse","target","value","console","log","host","id","query","userMessage","metaUrl","concat","numPages","pages","pagesLeft","buffer","http","get","res","error","statusCode","Error","message","resume","rawData","on","chunk","$","cheerio","load","filter","text","trim","next","parseInt","_loop","i","imageUrl","Jimp","read","then","image","getBase64","MIME_PNG","err","data","doc","jsPDF","addImage","addPage","save","catch","e","Header_LoadingExample","Body_ConversionInput","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c90aa9fa.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Header.css'\n\nexport default class LoadingExample extends Component {\n  state = {\n    show: false\n  }\n\n  onShow = ()=> {\n    this.setState({ show: true })\n  }\n\n  onHide = ()=> {\n    this.setState({ show: false })\n  }\n\n  render() {\n    return (\n      <header className=\"component-header\">\n        <div className=\"component-header-title\">\n          pdl2pdf ~ Panjab Digital Library to PDF Converter\n        </div>\n        <h2>\n        download image galleries on <a href=\"http://panjabdigilib.org\">punjabdigilib.org</a> onto a single PDF file\n        </h2>\n        <p>\n          ਪੁੰਜਾਬ ਡਿਜਿਟਲ ਲਾਈਬ੍ਰੇਰੀ (Panjab Digital Library) ਇਕ ਅਮੋਲਕ ਖਜਾਨਾ ਹੈ ਜਿਸ ਦੇ ਰਾਹੀਂ ਪੁਰਾਤਨ ਜਾਂ ਨਵੀਨ ਗ੍ਰੰਥਾਂ, ਪੁਸਤਕਾਂ ਅਤੇ ਹੋਰ ਲੇਖਾਂ ਦੀ ਸੰਬਾਲ ਕੀਤੀ ਗਈ ਹੈ,\n          ਅਤੇ <a href=\"http://panjabdigilib.org\">punjabdigilib.org</a> ਵੈਬਸਾਈਟ ਰਾਹੀਂ ਕੋਈ ਵੀ ਦਰਸ਼ਨ ਕਰ ਸੱਕਦਾ। ਪਰ ਕੁੱਝ ਲੇਖ ਜੋ ਸਿਰਫ ਤਸਵੀਰਾਂ ਦੇ ਰੂਪ ਵਿਚ ਹਨ, ਓਹੋ ਲੇਖ ਸੌਖੇ ਤਰੀਕੇ ਨਾਲ ਦਾਊਨਲੋਡਾਂ ਨਹੀ ਕਰ ਸੱਕਦੇ।\n          ਓਸ ਕਾਰਣ, ਇਸ ਵੈਬਸਾਈਟ ਵਿਚ ਲਿੰਕ ਪਾ ਕੇ, PDF ਦੇ ਰੂਪ ਵਿਚ ਦੋਾਨਲੋੳਦ ਕਰ ਲੋ ਜੀ।\n        </p>\n        <p>\n          Panjab Digital Library is an invaluable collection of old and new manuscripts that have been digitized and preserved.\n          However, not all of the content is easily downloadable. This utility can be used to convert imaage galleries that are missing a download link.\n          Simply paste the link of a manuscript or scripture that you would like to download and a PDF will be generated.\n        </p>\n        <p>\n          <b>*** ਜਰੂਰੀ ਬੇਨਤੀ: ਕੱਈ ਦਾਊਨਲੋਡਾਂ ਨੂੰ ਖੱਤਮ ਹੋਨ ਲਈ ਕੁੱਝ ਮਿੰਟ ਲਗ ਸੱਕਦੇ ਹਨ।</b>\n        </p>\n        <p>\n          <b>***Important: The program may take several minutes to complete for large files, please be patient!</b>\n        </p>\n      </header>\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './Body.css'\n\n\nexport default class ConversionInput extends React.PureComponent {\n  static propTypes = {\n    textChange: PropTypes.func\n  };\n\n  handleChange = event => {\n    this.props.textChange(event);\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"component-pdl-input\">\n          <div>\n            <input placeholder=\"Paste a URL link to the manuscript, ex: http://panjabdigilib.org/webuser/searches/displayPage.jsp?ID=8497&page=1&CategoryID=1\" onChange={this.handleChange} />\n          </div>\n          <div className=\"component-pdl-user-message\">\n            {this.props.outputLink}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport url from 'url'\nimport http from 'http'\nimport cheerio from 'cheerio'\nimport * as jsPDF from 'jspdf'\nimport Jimp from 'jimp/es';\nimport Header from './Header'\nimport Body from './Body'\nimport './App.css';\n\n\nexport default class App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: \"\",\n      userMessage: \"\",\n    };\n  }\n\n  handleInputChange = event => {\n    let self = this;\n    const inputUrl = url.parse(event.target.value, true)\n    console.log(inputUrl);\n    const host = inputUrl.host;\n    const id = inputUrl.query['ID'];\n    if (host !== 'panjabdigilib.org' || id == null) {\n      console.log(\"somethings happening\");\n      this.setState({\n        userMessage: `Please enter a valid URL from panjabdigilib.org`\n      })\n    } else {\n      const metaUrl = `http://cors-anywhere.herokuapp.com/http://panjabdigilib.org/webuser/searches/displayPage.jsp?ID=${id}&page=1&CategoryID=1`;\n      var numPages = null;\n      var pages = 1;\n      var pagesLeft = 0;\n      var buffer = [];\n      http.get(metaUrl, (res) => {\n        const { statusCode } = res;\n        let error;\n        if (statusCode !== 200) {\n          error = new Error('Request Failed.\\n' +\n                            `Status Code: ${statusCode}`);\n        }\n        if (error) {\n          console.error(error.message);\n          // Consume response data to free up memory\n          res.resume();\n          return;\n        }\n        let rawData = '';\n        res.on('data', (chunk) => { rawData += chunk; });\n        res.on('end', () => {\n          try {\n            var $ = cheerio.load(rawData);\n            numPages = $('td').filter(function() {\n              return $(this).text().trim() === 'Pages';\n            }).next().text();\n            pages = pagesLeft = parseInt(numPages);\n            for (let i = 1; i <= pages; i++) {\n              const imageUrl = `http://cors-anywhere.herokuapp.com/http://panjabdigilib.org/images?ID=${id}&page=${i}&pagetype=null`;\n              Jimp.read(imageUrl)\n                .then(image => {\n                  // imagePromises.push(image.getBase64Async(Jimp.MIME_PNG));\n                  image.getBase64(Jimp.MIME_PNG, function(err, data) {\n                    if (err != null) {\n                      console.log('error');\n                    } else {\n                      console.log(`converted ${i}`)\n                      buffer[i] = data;\n                      pagesLeft -= 1;\n                      self.setState({ userMessage: `Processing images... ${pagesLeft}/${pages} ਪਨੇ left`})\n                      if (pagesLeft <= 0) {\n                        self.setState({ userMessage: `Finished processing. Generating PDF...`})\n                        var doc = new jsPDF()\n                        for (let i = 1; i <= pages; i++) {\n                            doc.addImage(buffer[i], 'PNG', 15, 40, 180, 160);\n                            doc.addPage();\n                            self.setState({ userMessage: `Generating PDF... ${i}/${pages} ਪਨੇ completed`})\n                        }\n                        self.setState({ userMessage: `PDF Complete. Downloading...`})\n                        doc.save(`${id}.pdf`)\n                        self.setState({ userMessage: `Download complete`})\n                      }\n                    }\n                  });\n                })\n                .catch(err => {\n                  console.log(\"error\")\n                });\n            }\n          } catch (e) {\n            console.error(e.message);\n          }\n        });\n      }).on('error', (e) => {\n        console.error(`Got error: ${e.message}`);\n      });\n\n      this.setState({\n        userMessage: `Processing images...`\n      })\n    };\n    }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Body textChange={this.handleInputChange} outputLink={this.state.userMessage}/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div className=\"guca\">\n    <header className=\"guca-header\">\n    <App />\n    </header>\n  </div>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}